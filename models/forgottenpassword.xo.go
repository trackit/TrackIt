// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// ForgottenPassword represents a row from 'trackit.forgotten_password'.
type ForgottenPassword struct {
	ID      int       `json:"id"`      // id
	Created time.Time `json:"created"` // created
	UserID  int       `json:"user_id"` // user_id
	Token   string    `json:"token"`   // token

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ForgottenPassword exists in the database.
func (fp *ForgottenPassword) Exists() bool {
	return fp._exists
}

// Deleted provides information if the ForgottenPassword has been deleted from the database.
func (fp *ForgottenPassword) Deleted() bool {
	return fp._deleted
}

// Insert inserts the ForgottenPassword to the database.
func (fp *ForgottenPassword) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.forgotten_password (` +
		`created, user_id, token` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, fp.Created, fp.UserID, fp.Token)
	res, err := db.Exec(sqlstr, fp.Created, fp.UserID, fp.Token)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	fp.ID = int(id)
	fp._exists = true

	return nil
}

// Update updates the ForgottenPassword in the database.
func (fp *ForgottenPassword) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.forgotten_password SET ` +
		`created = ?, user_id = ?, token = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, fp.Created, fp.UserID, fp.Token, fp.ID)
	_, err = db.Exec(sqlstr, fp.Created, fp.UserID, fp.Token, fp.ID)
	return err
}

// Save saves the ForgottenPassword to the database.
func (fp *ForgottenPassword) Save(db XODB) error {
	if fp.Exists() {
		return fp.Update(db)
	}

	return fp.Insert(db)
}

// Delete deletes the ForgottenPassword from the database.
func (fp *ForgottenPassword) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fp._exists {
		return nil
	}

	// if deleted, bail
	if fp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.forgotten_password WHERE id = ?`

	// run query
	XOLog(sqlstr, fp.ID)
	_, err = db.Exec(sqlstr, fp.ID)
	if err != nil {
		return err
	}

	// set deleted
	fp._deleted = true

	return nil
}

// User returns the User associated with the ForgottenPassword's UserID (user_id).
//
// Generated from foreign key 'forgotten_password_ibfk_1'.
func (fp *ForgottenPassword) User(db XODB) (*User, error) {
	return UserByID(db, fp.UserID)
}

// ForgottenPasswordsByUserID retrieves a row from 'trackit.forgotten_password' as a ForgottenPassword.
//
// Generated from index 'foreign_user'.
func ForgottenPasswordsByUserID(db XODB, userID int) ([]*ForgottenPassword, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, created, user_id, token ` +
		`FROM trackit.forgotten_password ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ForgottenPassword{}
	for q.Next() {
		fp := ForgottenPassword{
			_exists: true,
		}

		// scan
		err = q.Scan(&fp.ID, &fp.Created, &fp.UserID, &fp.Token)
		if err != nil {
			return nil, err
		}

		res = append(res, &fp)
	}

	return res, nil
}

// ForgottenPasswordByID retrieves a row from 'trackit.forgotten_password' as a ForgottenPassword.
//
// Generated from index 'forgotten_password_id_pkey'.
func ForgottenPasswordByID(db XODB, id int) (*ForgottenPassword, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, created, user_id, token ` +
		`FROM trackit.forgotten_password ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	fp := ForgottenPassword{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fp.ID, &fp.Created, &fp.UserID, &fp.Token)
	if err != nil {
		return nil, err
	}

	return &fp, nil
}
