// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// UpdateEsMappingsJob represents a row from 'trackit.update_es_mappings_job'.
type UpdateEsMappingsJob struct {
	ID        int       `json:"id"`        // id
	Created   time.Time `json:"created"`   // created
	Completed time.Time `json:"completed"` // completed
	WorkerID  string    `json:"worker_id"` // worker_id
	JobError  string    `json:"job_error"` // job_error

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UpdateEsMappingsJob exists in the database.
func (uemj *UpdateEsMappingsJob) Exists() bool {
	return uemj._exists
}

// Deleted provides information if the UpdateEsMappingsJob has been deleted from the database.
func (uemj *UpdateEsMappingsJob) Deleted() bool {
	return uemj._deleted
}

// Insert inserts the UpdateEsMappingsJob to the database.
func (uemj *UpdateEsMappingsJob) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if uemj._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.update_es_mappings_job (` +
		`created, completed, worker_id, job_error` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, uemj.Created, uemj.Completed, uemj.WorkerID, uemj.JobError)
	res, err := db.Exec(sqlstr, uemj.Created, uemj.Completed, uemj.WorkerID, uemj.JobError)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	uemj.ID = int(id)
	uemj._exists = true

	return nil
}

// Update updates the UpdateEsMappingsJob in the database.
func (uemj *UpdateEsMappingsJob) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uemj._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if uemj._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.update_es_mappings_job SET ` +
		`created = ?, completed = ?, worker_id = ?, job_error = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, uemj.Created, uemj.Completed, uemj.WorkerID, uemj.JobError, uemj.ID)
	_, err = db.Exec(sqlstr, uemj.Created, uemj.Completed, uemj.WorkerID, uemj.JobError, uemj.ID)
	return err
}

// Save saves the UpdateEsMappingsJob to the database.
func (uemj *UpdateEsMappingsJob) Save(db XODB) error {
	if uemj.Exists() {
		return uemj.Update(db)
	}

	return uemj.Insert(db)
}

// Delete deletes the UpdateEsMappingsJob from the database.
func (uemj *UpdateEsMappingsJob) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uemj._exists {
		return nil
	}

	// if deleted, bail
	if uemj._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.update_es_mappings_job WHERE id = ?`

	// run query
	XOLog(sqlstr, uemj.ID)
	_, err = db.Exec(sqlstr, uemj.ID)
	if err != nil {
		return err
	}

	// set deleted
	uemj._deleted = true

	return nil
}

// UpdateEsMappingsJobByID retrieves a row from 'trackit.update_es_mappings_job' as a UpdateEsMappingsJob.
//
// Generated from index 'update_es_mappings_job_id_pkey'.
func UpdateEsMappingsJobByID(db XODB, id int) (*UpdateEsMappingsJob, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, created, completed, worker_id, job_error ` +
		`FROM trackit.update_es_mappings_job ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	uemj := UpdateEsMappingsJob{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&uemj.ID, &uemj.Created, &uemj.Completed, &uemj.WorkerID, &uemj.JobError)
	if err != nil {
		return nil, err
	}

	return &uemj, nil
}
